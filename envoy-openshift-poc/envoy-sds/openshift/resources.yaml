#########################
##      CONFIGMAP      ##
#########################
apiVersion: v1
kind: ConfigMap
metadata:
  name: sds
data:
  application.yml: |
    kubernetes:
      namespace: envoy
      api:
        host: https://kubernetes.default.svc.cluster.local
      token:
        path: /var/run/secrets/kubernetes.io/serviceaccount/token
    envoy:
      port: 10000

---

#########################
##  DEPLOYMENT CONFIG  ##
#########################
apiVersion: v1
kind: DeploymentConfig
metadata:
  labels:
    app: sds
  name: sds
spec:
  replicas: 1
  selector:
    app: sds
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: sds
    spec:
      serviceAccountName: apisa
      containers:
      - image: docker.io/jarodriguezparadigma/sds:1.0
        imagePullPolicy: Always
        name: sds
        ports:
        - containerPort: 8080
          protocol: TCP
        env:
        - name: CONFIG_PATH
          value: /temp/config/application.yml
        resources: {}
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        tty: true
        volumeMounts:
        - mountPath: /temp/config
          name: config
      volumes:
      - configMap:
          name: sds
          items:
          - key: application.yml
            path: application.yml
        name: config
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  test: false
  triggers:
  - type: ConfigChange

---

#########################
##       SERVICE       ##
########################
apiVersion: v1
kind: Service
metadata:
  labels:
    app: sds
  name: sds
spec:
  externalTrafficPolicy: Cluster
  ports:
  - name: 80-8080
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: sds
  sessionAffinity: None
  type: LoadBalancer
